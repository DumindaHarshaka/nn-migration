.green-ex-container 
  .side-bar
    .search
      input(type="text", placeholder="Search the green exchange",ng-model="greenExchangeCtrl.message")

      input(type="button", name="name", value="Search")
    hr
    a(href="#", ng-click="doCollapse()") 
      .add-new
        .icon
          img(src="/images/add_plant.png", alt="Post a new plant")
        .text
          h2 Post a new plant
          p Exchange, donate or request a plant


    .plant-info(ng-class="collapse ? 'collapse' : ''")
      .post-type
        button(type="button", name="button",ng-class="checkType('Exchange')",ng-click="typeTabClick('Exchange')") Exchange
        button(type="button", name="button",ng-class="checkType('Donate')",ng-click="typeTabClick('Donate')") Donate
        button(type="button", name="button",ng-class="checkType('Request')",ng-click="typeTabClick('Request')") Request
      .form

        form(name="pform.plantForm", ng-submit="submitForm()" novalidate)
          label Plant name 
          input(type="text",ng-model="plant.name", name="name",placeholder="Name of the plant", ng-class="{ 'has-error' : pform.plantForm.name.$invalid && !pform.plantForm.name.$pristine }" required)

          label Description

          textarea(name="description",ng-model="plant.description",id="description", rows="4", cols="40",placeholder="Description")

          label Quantity 

          input(type="number",ng-model="plant.quantity",min="1",name="quantity",id="qty", placeholder="Number of plants", ng-class="{ 'has-error' : pform.plantForm.quantity.$invalid && !pform.plantForm.quantity.$pristine }" required)

          label Location 

          input(places-auto-complete size=80 ng-model="plant.address" component-restrictions="{country:'lk'}" types="{{types}}" on-place-changed="greenExchange.placeChanged()", ng-class="{ 'has-error' : pform.plantForm.location.$invalid && !pform.plantForm.location.$pristine }", name="location" required)  

          label Your name
          input(type="text",name="username",ng-model="plant.username", placeholder="Your name", ng-class="{ 'has-error' : pform.plantForm.username.$invalid && !pform.plantForm.username.$pristine }" required) 
          label Email
          input(type="email",name="email",ng-model="plant.email", placeholder="Email address", ng-class="{ 'has-error' : pform.plantForm.email.$invalid && !pform.plantForm.email.$pristine }" required) 

          input(type="submit", value="Post" ng-disabled="pform.plantForm.$invalid || plant.plantLoading")
          .loading(ng-show="plant.plantLoading")
            img(src="/images/ball.gif", alt="Wait..", height="30px" , width="30px")
                

      .map  
        ng-map(class="map")





    hr
    .filler
  .new-posts()
    h1 {{posts.length}}
    p new posts

  .posts
    .post(ng-repeat = "post in posts")
      .owner
        .image
          img(class='img',src='/images/avatar.svg')
        .details
          h2(class='name')  {{post.username}}
          p(class='action') has posted a new plant on 
            span#marketplace 
              strong Green Exchange
          p(class='date') {{post.createdAt | date:"MM/dd/yyyy 'at' h:mma"}}
          
            
        
      .o-divider 
      .item
        span(class="type") {{post.responses.length}} Response{{post.responses.length == 1 ? '':'s'}}
        span(class="type",ng-class="getPostType(post.type).toLowerCase()") {{post.type}}
        
        .image
          img(src='/images/plant.png')  
        .details
          h3(class='name') {{post.name}}
            
          p(class='status') {{post.address}}
          p(class='discription') {{post.description}}
          p(class='discription') Number of plants: {{post.quantity}}
          a(href="#",ng-click="post.response_form_class = 'collapse'") 
            p(class='responds')
              span
                img(src="/images/responds.svg", alt="",height="25",width="25")
              span(ng-class="getPostType(post.type).toLowerCase()") Respond  
                
            
        //- .status
        //-   h3(class='current-status')
      .respond(ng-class="post.response_form_class")
        .respond-form
          form(name="post.responseForm", ng-submit="submitResponse(post)" novalidate)            
            input(type="text",ng-model="post.new_response.name", name="name",placeholder="Name of the plant", ng-class="{ 'has-error' : post.responseForm.name.$invalid && !post.responseForm.name.$pristine }" required)
            input(type="number",ng-model="post.new_response.quantity",min="1",name="quantity",id="qty", placeholder="Number of plants", ng-class="{ 'has-error' : post.responseForm.quantity.$invalid && !post.responseForm.quantity.$pristine }" required)
            input(places-auto-complete size=80 ng-model="post.new_response.address" component-restrictions="{country:'lk'}" types="{{types}}" on-place-changed="greenExchange.placeChanged()", ng-class="{ 'has-error' : post.responseForm.location.$invalid && !post.responseForm.location.$pristine }", name="location" required)  
            input(type="text",name="username",ng-model="post.new_response.username", placeholder="Your name", ng-class="{ 'has-error' : post.responseForm.username.$invalid && !post.responseForm.username.$pristine }" required) 
            input(type="email",name="email",ng-model="post.new_response.email", placeholder="Email address", ng-class="{ 'has-error' : post.responseForm.email.$invalid && !post.responseForm.email.$pristine }" required) 
            p You will be contacted through the provided email so make sure it's correct.
            .break  
              input(type="submit", value="Respond" ng-disabled="post.responseForm.$invalid || post.responseLoading")
              .loading(ng-show="post.responseLoading")
                img(src="/images/ball.gif", alt="Wait..", height="30px" , width="30px")
                
  
            
      .market-item-bids(ng-show="post.responses.length > 0") 
        ul(class='bids-list')
          li(class='bid-item',ng-repeat="res in post.responses")
            .bidder
              .image
                img(src='/images/avatar.svg')      
            .details
              h3.name {{res.response.username}} 
                small.action has bid on this plant with 
                span {{res.response.quantity}} {{res.response.name}} plant{{res.response.quantity == 1 ? '' : 's'}}
              //h3.value 
              p.discription {{res.response.createdAt | date:"MM/dd/yyyy 'at' h:mma"}}











//- script(type="application/javascript", src="../../assets/js/script.js")
//script(type="application/javascript",src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBCO13QjFKNU_2w0aCcwqJV5vymDjr5OVY&libraries=places&callback=initAutocomplete" async defer)
